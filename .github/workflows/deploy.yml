# Sample workflow for building and deploying an Astro site using GitHub Actions and Nginx
#
# To get started with Astro see: https://docs.astro.build/en/getting-started/
#
name: Deploy Astro site using GitHub Actions and Nginx

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  BUILD_PATH: "." # default value when not using subfolders
  NGINX_PATH: "/home/magellan/site-astro"

jobs:
  build:
    name: Build
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build with Astro
        run: ${{ steps.detect-package-manager.outputs.runner }} astro build
        working-directory: ${{ env.BUILD_PATH }}

      # - name: Create nginx html folder
      #   run: mkdir -p ${{ env.NGINX_PATH }}
      #   working-directory: ${{ env.BUILD_PATH }}

      # - name: Copy to nginx html folder
      #   run: cp -r ${{ env.BUILD_PATH }}/dist/* ${{ env.NGINX_PATH }}
      #   working-directory: ${{ env.BUILD_PATH }}

  deploy:
    needs: build
    runs-on: self-hosted
    name: Deploy
    steps:
      - name: Start Nginx container
        id: deployment
        run: docker compose up -d
        working-directory: ${{ env.BUILD_PATH }}/nginx
        # run: docker run -d --restart unless-stopped -p 8080:80 --name astro-site -v ${{ env.NGINX_PATH }}:/usr/share/nginx/html:ro -v /path/to/config:/etc/nginx/conf.d:ro nginx:alpine || docker start astro-site
